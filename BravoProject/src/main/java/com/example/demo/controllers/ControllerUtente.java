package com.example.demo.controllers;

import java.util.Optional;
import javax.management.AttributeNotFoundException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.example.demo.dto.UtenteDTO;
import com.example.demo.entity.Role;
import com.example.demo.entity.Utente;
import com.example.demo.repository.UtenteRepository;
import com.example.demo.response.ResponseHandler;

@Controller // This means that this class is a Controller
@RequestMapping(path = "/Utente") // This means URL's start with /demo (after Application path)
public class ControllerUtente {
	@Autowired // This means to get the bean called corsiRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private UtenteRepository utenteRepository;

	@PostMapping(path = "/add") // Map ONLY POST Requests
	public ResponseEntity<Object> addNewUser(@RequestParam String nome, @RequestParam String cognome,
			@RequestParam String email, @RequestParam String password,
			@RequestParam(required = false) String numTelefono, @RequestParam String scadenzaAbbonamento) {
		Utente u = new Utente();

		if (controlloMail(email)) {
			return ResponseHandler.generateResponse("Email già esistente", HttpStatus.BAD_REQUEST, null);
		} else {
			u.setNome(nome);
			u.setCognome(cognome);
			u.setEmail(email);
			u.setPassword(password);
			u.setNumeroTelefono(numTelefono);
			u.setUtentiRole(Role.USER);
			return ResponseHandler.generateResponse("Utente aggiunto", HttpStatus.OK, utenteRepository.save(u));
		}
	}

	@PostMapping(path = "/registrationProcess") // Map ONLY POST Requests
	public ResponseEntity<Object> registration(@RequestParam String nome, @RequestParam String cognome,
			@RequestParam String email, @RequestParam String password,
			@RequestParam(required = false) String numTelefono) {
		Utente u = new Utente();

		if (controlloMail(email)) {
			return ResponseHandler.generateResponse("Email già esistente", HttpStatus.BAD_REQUEST, null);
		} else {
			u.setNome(nome);
			u.setCognome(cognome);
			u.setEmail(email);
			u.setNumeroTelefono(numTelefono);
			u.setUtentiRole(Role.USER);
			BCryptPasswordEncoder encoder = new BCryptPasswordEncoder();
			String encodedPassword = encoder.encode(password);
			u.setPassword(encodedPassword);
			utenteRepository.save(u);
			UtenteDTO uDto = new UtenteDTO(u);
			
			return ResponseHandler.generateResponse("Utente aggiunto", HttpStatus.OK, uDto);
		}
	}

	@GetMapping(path = "/all")
	public @ResponseBody Iterable<Utente> getAllPalestre() {
		// This returns a JSON or XML with the users
		return utenteRepository.findAll();
	}

	@GetMapping(path = "/searchUserById/{id}")
	public ResponseEntity<Object> ricercaUtente(@RequestParam int id) throws AttributeNotFoundException {
		Utente u = utenteRepository.findById(id)
				.orElseThrow(() -> new AttributeNotFoundException("Id not found for this id :: " + id));
		return ResponseHandler.generateResponse("Dati utente", HttpStatus.OK, u);
	}

	// Implementare Ricerca per email e per nomeUtente
	public boolean controlloMail(String email) {
		Optional<Utente> listaUtenti = utenteRepository.findByEmail(email);
		return listaUtenti.isPresent();
	}

	// Metodo per gestire l'abbonamento
	@PutMapping(path = "/aggiornaAbbonamento")
	public ResponseEntity<Object> gestioneAbbonamento(@RequestParam int numeroMesi, @RequestParam Integer IDUtente)
			throws AttributeNotFoundException {
		Utente u = utenteRepository.findById(IDUtente)
				.orElseThrow(() -> new AttributeNotFoundException("Id not found for this id :: " + IDUtente));
		u.setScadenzaAbbonamento(u.getScadenzaAbbonamento().plusMonths(numeroMesi));
		return ResponseHandler.generateResponse("Abbonamento aggiornato", HttpStatus.OK, utenteRepository.save(u));
	}

}
